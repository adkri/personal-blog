<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>operating system on Amit Adhikari λ=</title>
    <link>/tags/operating-system/</link>
    <description>Recent content in operating system on Amit Adhikari λ=</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&amp;copy; &lt;a href=&#34;https://github.com/adkri&#34;&gt;Amit Adhikari&lt;/a&gt; 2020</copyright>
    <lastBuildDate>Sun, 27 Jan 2019 16:04:56 -0400</lastBuildDate>
    
	<atom:link href="/tags/operating-system/index.xml" rel="self" type="application/rss+xml" />
    
    
    
    <item>
      <title>Nature of Software</title>
      <link>/posts/nature-of-software/</link>
      <pubDate>Mon, 02 Nov 2020 00:00:00 -0600</pubDate>
      
      <guid>/posts/nature-of-software/</guid>
      <description>One thing that a lot of software engineers</description>
    </item>
    
    
    
    <item>
      <title>Optimizing for Cache Lines</title>
      <link>/posts/Optimizing-for-Cache-Lines/</link>
      <pubDate>Sun, 05 Apr 2020 13:38:56 -0400</pubDate>
      
      <guid>/posts/Optimizing-for-Cache-Lines/</guid>
      <description>In this post, we will see how we can write code optimized for cpu cache lines. If this topic is new to you, this post should be a good introduction. I do not dive into much details but will exaplain with some examples.
So recently I have been learning about designing data systems, and the first things I learned about were data structures. In these articles the common theme was designing structures while thinking about how they were going to be accessed, and in all of them I heard about cache lines.</description>
    </item>
    
    
    
    <item>
      <title>Writing LRU Cache in C</title>
      <link>/posts/writing-lru-cache-in-c/</link>
      <pubDate>Wed, 13 Mar 2019 18:30:56 -0400</pubDate>
      
      <guid>/posts/writing-lru-cache-in-c/</guid>
      <description>In this post we will discuss the process of creating a Least Recently Used(LRU) cache structure in C. The Least Recently Used policy is very common model to create caching structures in computers.
The LRU cache eviction policy is as simple as it sounds. It describes the eviction strategy of data in a cache, in this case, if the cache requires to evict data it will evict the least recently used item.</description>
    </item>
    
    
    
    <item>
      <title>Notes on Operating System: Three Easy Pieces</title>
      <link>/posts/OSTEP/</link>
      <pubDate>Sun, 27 Jan 2019 16:04:56 -0400</pubDate>
      
      <guid>/posts/OSTEP/</guid>
      <description>CPU Virtualization Processes a process is a running program
the os virtualizes the cpu
by running one program, then stopping it and running another, the os promotes the illusion that many cpu&amp;rsquo;s exist
this basic technique is called time sharing of the CPU, allows users to run as many concurrent processes as they like
to implement virtualuzation of the cpu, os needs:
low-level machinery - mechanisms eg. time-sharing
high-level intelligence - policies eg.</description>
    </item>
    
    
    
    <item>
      <title>Binary Search Tree in Clojure</title>
      <link>/posts/clojure-bst/</link>
      <pubDate>Sun, 04 Nov 2018 16:04:56 -0400</pubDate>
      
      <guid>/posts/clojure-bst/</guid>
      <description>Structure of the BST
Empty tree - nil Single node - [5 nil nil] Three nodes - [5 [3 nil nil] [7 nil nil]] Insert into BST:
(defn insert [tree &amp;amp; values] (cond (empty? values) tree (nil? tree) (apply insert [(first values) nil nil] (rest values)) (&amp;lt; (first values) (first tree)) (apply insert [(first tree) (insert (second tree) (first values)) (last tree)] (rest values)) :else (apply insert [(first tree) (second tree) (insert (last tree) (first values))] (rest values)) ) ) Depth of a BST:</description>
    </item>
    
    
    
    <item>
      <title>Writing a Custom Database in Python</title>
      <link>/posts/writing-a-custom-database-in-python/</link>
      <pubDate>Wed, 01 Aug 2018 16:04:56 -0400</pubDate>
      
      <guid>/posts/writing-a-custom-database-in-python/</guid>
      <description>In this post, we&amp;rsquo;ll be discussing about writing our own custom database in Python.
Our database will be quite simple and we will be using LevelDB as our storage engine. LevelDB is a really fast key-value store developed at Google. This is the actual engine that does storing of our data, and it supports the common get, put, delete and iterate operations, and it does it super fast. And our code is going to make a wrapper around this and provide functionality we want incorporated.</description>
    </item>
    
    
    
    
  </channel>
</rss>
